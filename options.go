// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package zap

import "github.com/uber-go/atomic"

// Option is used to set options for the logger.
type Option interface {
	apply(*Meta)
}

// optionFunc wraps a func so it satisfies the Option interface.
type optionFunc func(*Meta)

func (f optionFunc) apply(m *Meta) {
	f(m)
}

// This allows any Level to be used as an option.
func (l Level) apply(m *Meta) {
	m.Enabler = l
}

// Enabled return true if the message level is at or above this level.
// Furthermore, Enabled always returns true for PanicLevel and FatalLevel.
//
// For example, WarnLevel.Enabled will return true for WarnLevel, ErrorLevel,
// PanicLevel, and FatalLevel, but return false for InfoLevel and DebugLevel.
//
// This implements the Enabler interface so that Levels may be set directly to
// Meta.Enabler.
func (l Level) Enabled(lvl Level, _ string) bool {
	return lvl >= l
}

// Fields sets the initial fields for the logger.
func Fields(fields ...Field) Option {
	return optionFunc(func(m *Meta) {
		addFields(m.Encoder, fields)
	})
}

// Output sets the destination for the logger's output. The supplied WriteSyncer
// is automatically wrapped with a mutex, so it need not be safe for concurrent
// use.
func Output(w WriteSyncer) Option {
	return optionFunc(func(m *Meta) {
		m.Output = newLockedWriteSyncer(w)
	})
}

// ErrorOutput sets the destination for errors generated by the logger. The
// supplied WriteSyncer is automatically wrapped with a mutex, so it need not be
// safe for concurrent use.
func ErrorOutput(w WriteSyncer) Option {
	return optionFunc(func(m *Meta) {
		m.ErrorOutput = newLockedWriteSyncer(w)
	})
}

// Development puts the logger in development mode, which alters the behavior
// of the DFatal method.
func Development() Option {
	return optionFunc(func(m *Meta) {
		m.Development = true
	})
}

// DynamicLevel supports changing the level of one or more loggers atomically
// at runtime. It can be passed as an Option to any supporting logger
// constructor, or assigned to Meta.Enabled directly if needed.
type DynamicLevel struct {
	lvl *atomic.Int32
}

// NewDynamicLevel creates a new dynamic level Option / MetaCheck.
func NewDynamicLevel() DynamicLevel {
	return DynamicLevel{
		lvl: atomic.NewInt32(int32(InfoLevel)),
	}
}

// apply implements the Option interface.
func (dl DynamicLevel) apply(m *Meta) {
	m.Enabler = dl
}

// Enabled implements the MetaEnabled interface, to aid in implementing
// Logger.Check.
func (dl DynamicLevel) Enabled(lvl Level, _ string) bool {
	return lvl >= dl.Level()
}

// Level atomically returns the minimum enabled log level.
func (dl DynamicLevel) Level() Level {
	return Level(dl.lvl.Load())
}

// SetLevel atomically alters the logging level.
func (dl DynamicLevel) SetLevel(lvl Level) {
	dl.lvl.Store(int32(lvl))
}
